# 模块化 编程 的思想 已经接触很多次了，这里就不再赘述了

# __name__属性
# 一个模块被另一个程序第一次引入时，其主程序将运行。
# 如果我们想在模块被引入时，模块中的某一程序块不执行，
# 我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。

# 引入 一个模块 时，模块会被执行

# 所以，可以通过判断 __name__ 的值，来确定 是 自身在调用 还是 引入外部模块 时 调用了

# if __name__ =="__main__":
#     print("程序自身在运行")
# else:
#     print('我来自另一模块')


# dir() 函数
# 内置的函数 dir() 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:
# import math
# print(dir(math))



# 然后下面 还有一个重要的概念 是 包
# 包是一种管理 Python 模块命名空间的形式，采用"点模块名称"。
#
# 比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。
#
# 就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，
# 采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。

# 然后 从一个包里面导入一个模块
# from 包名 import 模块名